// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: gw.proto

package gw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyClient is the client API for Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyClient interface {
	// 双向流模式
	ProxyStreamMsg(ctx context.Context, opts ...grpc.CallOption) (Proxy_ProxyStreamMsgClient, error)
	// 一元模式
	ProxyUnitaryMsg(ctx context.Context, in *UnitaryTos, opts ...grpc.CallOption) (*UnitaryTog, error)
}

type proxyClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyClient(cc grpc.ClientConnInterface) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) ProxyStreamMsg(ctx context.Context, opts ...grpc.CallOption) (Proxy_ProxyStreamMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &Proxy_ServiceDesc.Streams[0], "/pb.Proxy/ProxyStreamMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyProxyStreamMsgClient{stream}
	return x, nil
}

type Proxy_ProxyStreamMsgClient interface {
	Send(*StreamTos) error
	Recv() (*StreamTog, error)
	grpc.ClientStream
}

type proxyProxyStreamMsgClient struct {
	grpc.ClientStream
}

func (x *proxyProxyStreamMsgClient) Send(m *StreamTos) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyProxyStreamMsgClient) Recv() (*StreamTog, error) {
	m := new(StreamTog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyClient) ProxyUnitaryMsg(ctx context.Context, in *UnitaryTos, opts ...grpc.CallOption) (*UnitaryTog, error) {
	out := new(UnitaryTog)
	err := c.cc.Invoke(ctx, "/pb.Proxy/ProxyUnitaryMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServer is the server API for Proxy service.
// All implementations must embed UnimplementedProxyServer
// for forward compatibility
type ProxyServer interface {
	// 双向流模式
	ProxyStreamMsg(Proxy_ProxyStreamMsgServer) error
	// 一元模式
	ProxyUnitaryMsg(context.Context, *UnitaryTos) (*UnitaryTog, error)
	mustEmbedUnimplementedProxyServer()
}

// UnimplementedProxyServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServer struct {
}

func (UnimplementedProxyServer) ProxyStreamMsg(Proxy_ProxyStreamMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method ProxyStreamMsg not implemented")
}
func (UnimplementedProxyServer) ProxyUnitaryMsg(context.Context, *UnitaryTos) (*UnitaryTog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyUnitaryMsg not implemented")
}
func (UnimplementedProxyServer) mustEmbedUnimplementedProxyServer() {}

// UnsafeProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServer will
// result in compilation errors.
type UnsafeProxyServer interface {
	mustEmbedUnimplementedProxyServer()
}

func RegisterProxyServer(s grpc.ServiceRegistrar, srv ProxyServer) {
	s.RegisterService(&Proxy_ServiceDesc, srv)
}

func _Proxy_ProxyStreamMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServer).ProxyStreamMsg(&proxyProxyStreamMsgServer{stream})
}

type Proxy_ProxyStreamMsgServer interface {
	Send(*StreamTog) error
	Recv() (*StreamTos, error)
	grpc.ServerStream
}

type proxyProxyStreamMsgServer struct {
	grpc.ServerStream
}

func (x *proxyProxyStreamMsgServer) Send(m *StreamTog) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyProxyStreamMsgServer) Recv() (*StreamTos, error) {
	m := new(StreamTos)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Proxy_ProxyUnitaryMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitaryTos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ProxyUnitaryMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Proxy/ProxyUnitaryMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ProxyUnitaryMsg(ctx, req.(*UnitaryTos))
	}
	return interceptor(ctx, in, info, handler)
}

// Proxy_ServiceDesc is the grpc.ServiceDesc for Proxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Proxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProxyUnitaryMsg",
			Handler:    _Proxy_ProxyUnitaryMsg_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProxyStreamMsg",
			Handler:       _Proxy_ProxyStreamMsg_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gw.proto",
}
